// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usersFieldNames          = builder.RawFieldNames(&Users{})
	usersRows                = strings.Join(usersFieldNames, ",")
	usersRowsExpectAutoSet   = strings.Join(stringx.Remove(usersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	usersRowsWithPlaceHolder = strings.Join(stringx.Remove(usersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUsersIdPrefix           = "cache:users:id:"
	cacheUsersEmailPrefix        = "cache:users:email:"
	cacheUsersPhonePrefix        = "cache:users:phone:"
	cacheUsersUserIdPrefix       = "cache:users:userId:"
	cacheUsersUsernamePrefix     = "cache:users:username:"
	cacheUsersWechatOpenidPrefix = "cache:users:wechatOpenid:"
)

type (
	usersModel interface {
		Insert(ctx context.Context, data *Users) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Users, error)
		FindOneByEmail(ctx context.Context, email string) (*Users, error)
		FindOneByPhone(ctx context.Context, phone string) (*Users, error)
		FindOneByUserId(ctx context.Context, userId string) (*Users, error)
		FindOneByUsername(ctx context.Context, username string) (*Users, error)
		FindOneByWechatOpenid(ctx context.Context, wechatOpenid string) (*Users, error)
		Update(ctx context.Context, data *Users) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUsersModel struct {
		sqlc.CachedConn
		table string
	}

	Users struct {
		Id                  int64        `db:"id"`                    // 自增 ID
		UserId              string       `db:"user_id"`               // 用户ID
		Age                 int64        `db:"age"`                   // 年龄
		Avatar              string       `db:"avatar"`                // 头像URL
		Username            string       `db:"username"`              // 用户名
		Password            string       `db:"password"`              // 密码
		PasswordUpdatedAt   sql.NullTime `db:"password_updated_at"`   // 密码更新时间
		Email               string       `db:"email"`                 // 邮箱
		EmailVerified       int64        `db:"email_verified"`        // 邮箱是否已验证；1-已验证,0-未验证
		Phone               string       `db:"phone"`                 // 手机号
		PhoneVerified       int64        `db:"phone_verified"`        // 手机号是否已验证；1-已验证,0-未验证
		Gender              int64        `db:"gender"`                // 性别：0-未设置，1-男，2-女，3-其他
		Status              int64        `db:"status"`                // 状态：1-正常，0-禁用
		FailedLoginAttempts int64        `db:"failed_login_attempts"` // 失败登录次数，超过5次则锁定账户，登录成功后重置
		LastLoginAt         sql.NullTime `db:"last_login_at"`         // 最后登录时间
		LastLoginIp         string       `db:"last_login_ip"`         // 最后登录IP
		IsRisk              int64        `db:"is_risk"`               // 是否为风险用户；1-是,0-否
		RegisterSource      int64        `db:"register_source"`       // 注册来源：1-web，2-app，3-wechat，4-qq，5-github，6-google
		RegisterIp          string       `db:"register_ip"`           // 注册IP
		WechatOpenid        string       `db:"wechat_openid"`         // 微信OpenID
		CreatedAt           time.Time    `db:"created_at"`            // 创建时间
		UpdatedAt           time.Time    `db:"updated_at"`            // 更新时间
		DeletedAt           sql.NullTime `db:"deleted_at"`            // 删除时间
	}
)

func newUsersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUsersModel {
	return &defaultUsersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`users`",
	}
}

func (m *defaultUsersModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	usersEmailKey := fmt.Sprintf("%s%v", cacheUsersEmailPrefix, data.Email)
	usersIdKey := fmt.Sprintf("%s%v", cacheUsersIdPrefix, id)
	usersPhoneKey := fmt.Sprintf("%s%v", cacheUsersPhonePrefix, data.Phone)
	usersUserIdKey := fmt.Sprintf("%s%v", cacheUsersUserIdPrefix, data.UserId)
	usersUsernameKey := fmt.Sprintf("%s%v", cacheUsersUsernamePrefix, data.Username)
	usersWechatOpenidKey := fmt.Sprintf("%s%v", cacheUsersWechatOpenidPrefix, data.WechatOpenid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, usersEmailKey, usersIdKey, usersPhoneKey, usersUserIdKey, usersUsernameKey, usersWechatOpenidKey)
	return err
}

func (m *defaultUsersModel) FindOne(ctx context.Context, id int64) (*Users, error) {
	usersIdKey := fmt.Sprintf("%s%v", cacheUsersIdPrefix, id)
	var resp Users
	err := m.QueryRowCtx(ctx, &resp, usersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByEmail(ctx context.Context, email string) (*Users, error) {
	usersEmailKey := fmt.Sprintf("%s%v", cacheUsersEmailPrefix, email)
	var resp Users
	err := m.QueryRowIndexCtx(ctx, &resp, usersEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", usersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, email); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByPhone(ctx context.Context, phone string) (*Users, error) {
	usersPhoneKey := fmt.Sprintf("%s%v", cacheUsersPhonePrefix, phone)
	var resp Users
	err := m.QueryRowIndexCtx(ctx, &resp, usersPhoneKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", usersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, phone); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByUserId(ctx context.Context, userId string) (*Users, error) {
	usersUserIdKey := fmt.Sprintf("%s%v", cacheUsersUserIdPrefix, userId)
	var resp Users
	err := m.QueryRowIndexCtx(ctx, &resp, usersUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", usersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByUsername(ctx context.Context, username string) (*Users, error) {
	usersUsernameKey := fmt.Sprintf("%s%v", cacheUsersUsernamePrefix, username)
	var resp Users
	err := m.QueryRowIndexCtx(ctx, &resp, usersUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", usersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByWechatOpenid(ctx context.Context, wechatOpenid string) (*Users, error) {
	usersWechatOpenidKey := fmt.Sprintf("%s%v", cacheUsersWechatOpenidPrefix, wechatOpenid)
	var resp Users
	err := m.QueryRowIndexCtx(ctx, &resp, usersWechatOpenidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `wechat_openid` = ? limit 1", usersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, wechatOpenid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) Insert(ctx context.Context, data *Users) (sql.Result, error) {
	usersEmailKey := fmt.Sprintf("%s%v", cacheUsersEmailPrefix, data.Email)
	usersIdKey := fmt.Sprintf("%s%v", cacheUsersIdPrefix, data.Id)
	usersPhoneKey := fmt.Sprintf("%s%v", cacheUsersPhonePrefix, data.Phone)
	usersUserIdKey := fmt.Sprintf("%s%v", cacheUsersUserIdPrefix, data.UserId)
	usersUsernameKey := fmt.Sprintf("%s%v", cacheUsersUsernamePrefix, data.Username)
	usersWechatOpenidKey := fmt.Sprintf("%s%v", cacheUsersWechatOpenidPrefix, data.WechatOpenid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, usersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Age, data.Avatar, data.Username, data.Password, data.PasswordUpdatedAt, data.Email, data.EmailVerified, data.Phone, data.PhoneVerified, data.Gender, data.Status, data.FailedLoginAttempts, data.LastLoginAt, data.LastLoginIp, data.IsRisk, data.RegisterSource, data.RegisterIp, data.WechatOpenid, data.DeletedAt)
	}, usersEmailKey, usersIdKey, usersPhoneKey, usersUserIdKey, usersUsernameKey, usersWechatOpenidKey)
	return ret, err
}

func (m *defaultUsersModel) Update(ctx context.Context, newData *Users) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	usersEmailKey := fmt.Sprintf("%s%v", cacheUsersEmailPrefix, data.Email)
	usersIdKey := fmt.Sprintf("%s%v", cacheUsersIdPrefix, data.Id)
	usersPhoneKey := fmt.Sprintf("%s%v", cacheUsersPhonePrefix, data.Phone)
	usersUserIdKey := fmt.Sprintf("%s%v", cacheUsersUserIdPrefix, data.UserId)
	usersUsernameKey := fmt.Sprintf("%s%v", cacheUsersUsernamePrefix, data.Username)
	usersWechatOpenidKey := fmt.Sprintf("%s%v", cacheUsersWechatOpenidPrefix, data.WechatOpenid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, usersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.Age, newData.Avatar, newData.Username, newData.Password, newData.PasswordUpdatedAt, newData.Email, newData.EmailVerified, newData.Phone, newData.PhoneVerified, newData.Gender, newData.Status, newData.FailedLoginAttempts, newData.LastLoginAt, newData.LastLoginIp, newData.IsRisk, newData.RegisterSource, newData.RegisterIp, newData.WechatOpenid, newData.DeletedAt, newData.Id)
	}, usersEmailKey, usersIdKey, usersPhoneKey, usersUserIdKey, usersUsernameKey, usersWechatOpenidKey)
	return err
}

func (m *defaultUsersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUsersIdPrefix, primary)
}

func (m *defaultUsersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUsersModel) tableName() string {
	return m.table
}
