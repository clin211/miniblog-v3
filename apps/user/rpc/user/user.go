// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: user.proto

package user

import (
	"context"

	"github.com/clin211/miniblog-v3/apps/user/rpc/pb/rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteUserRequest  = rpc.DeleteUserRequest
	DeleteUserResponse = rpc.DeleteUserResponse
	GetUserRequest     = rpc.GetUserRequest
	GetUserResponse    = rpc.GetUserResponse
	LoginRequest       = rpc.LoginRequest
	LoginResponse      = rpc.LoginResponse
	RegisterRequest    = rpc.RegisterRequest
	RegisterResponse   = rpc.RegisterResponse
	UpdateUserRequest  = rpc.UpdateUserRequest
	UpdateUserResponse = rpc.UpdateUserResponse

	User interface {
		// Register 用户注册
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		// GetUser 获取用户信息
		GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		// UpdateUser 更新用户信息
		UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
		// DeleteUser 删除用户
		DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
		// Login 用户登录
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// Register 用户注册
func (m *defaultUser) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := rpc.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// GetUser 获取用户信息
func (m *defaultUser) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := rpc.NewUserClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

// UpdateUser 更新用户信息
func (m *defaultUser) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	client := rpc.NewUserClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

// DeleteUser 删除用户
func (m *defaultUser) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	client := rpc.NewUserClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

// Login 用户登录
func (m *defaultUser) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := rpc.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}
