// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: user.proto

package server

import (
	"context"

	"github.com/clin211/miniblog-v3/apps/user/rpc/internal/logic"
	"github.com/clin211/miniblog-v3/apps/user/rpc/internal/svc"
	"github.com/clin211/miniblog-v3/apps/user/rpc/pb/rpc"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	rpc.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

// Register 用户注册
func (s *UserServer) Register(ctx context.Context, in *rpc.RegisterRequest) (*rpc.RegisterResponse, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

// GetUser 获取用户信息
func (s *UserServer) GetUser(ctx context.Context, in *rpc.GetUserRequest) (*rpc.GetUserResponse, error) {
	l := logic.NewGetUserLogic(ctx, s.svcCtx)
	return l.GetUser(in)
}

// UpdateUser 更新用户信息
func (s *UserServer) UpdateUser(ctx context.Context, in *rpc.UpdateUserRequest) (*rpc.UpdateUserResponse, error) {
	l := logic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

// DeleteUser 删除用户
func (s *UserServer) DeleteUser(ctx context.Context, in *rpc.DeleteUserRequest) (*rpc.DeleteUserResponse, error) {
	l := logic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

// Login 用户登录
func (s *UserServer) Login(ctx context.Context, in *rpc.LoginRequest) (*rpc.LoginResponse, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}
