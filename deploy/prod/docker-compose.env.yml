version: "3.8"

services:
  # MySQL 数据库服务
  mysql:
    image: mysql:8.0.27
    container_name: miniblog-v3-mysql-1
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123456
      MYSQL_DATABASE: miniblog
      MYSQL_USER: miniblog
      MYSQL_PASSWORD: miniblog123
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - miniblog-v3-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
      - "com.docker.compose.service=mysql"

  # Redis 缓存服务
  redis:
    image: redis:latest
    container_name: miniblog-v3-redis-1
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123 --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - miniblog-v3-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      timeout: 3s
      retries: 5
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
      - "com.docker.compose.service=redis"

  # etcd 服务
  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    container_name: miniblog-v3-etcd-1
    restart: unless-stopped
    command: |
      etcd
      --name miniblog-v3-etcd-1
      --data-dir /var/lib/etcd
      --listen-client-urls http://0.0.0.0:2379
      --advertise-client-urls http://miniblog-v3-etcd-1:2379
      --listen-peer-urls http://0.0.0.0:2380
      --initial-advertise-peer-urls http://miniblog-v3-etcd-1:2380
      --initial-cluster miniblog-v3-etcd-1=http://miniblog-v3-etcd-1:2380
      --initial-cluster-state new
      --initial-cluster-token miniblog-etcd-token
      --max-request-bytes 1048576
      --quota-backend-bytes 2147483648
    volumes:
      - etcd_data:/var/lib/etcd
    ports:
      - "2379:2379"
      - "2380:2380"
    networks:
      - miniblog-v3-network
    healthcheck:
      test:
        [
          "CMD",
          "etcdctl",
          "endpoint",
          "health",
          "--endpoints=http://localhost:2379",
        ]
      timeout: 10s
      retries: 5
      start_period: 10s
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
      - "com.docker.compose.service=etcd"

  # Zookeeper 服务（Kafka 依赖）
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: miniblog-v3-zookeeper-1
    restart: unless-stopped
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
      ZOO_4LW_COMMANDS_WHITELIST: "*"
      ZOO_TICK_TIME: 2000
      ZOO_INIT_LIMIT: 5
      ZOO_SYNC_LIMIT: 2
      ZOO_MAX_CLIENT_CNXNS: 60
      ZOO_AUTOPURGE_SNAP_RETAIN_COUNT: 3
      ZOO_AUTOPURGE_PURGE_INTERVAL: 24
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    ports:
      - "2181:2181"
    networks:
      - miniblog-v3-network
    healthcheck:
      test:
        ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep -q imok || exit 1"]
      timeout: 15s
      retries: 15
      start_period: 90s
      interval: 15s
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
      - "com.docker.compose.service=zookeeper"

  # Kafka 服务
  kafka:
    image: bitnami/kafka:latest
    container_name: miniblog-v3-kafka-1
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      # KRaft 模式配置
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      # 主题配置
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_DELETE_TOPIC_ENABLE: true
      # 日志配置
      KAFKA_CFG_LOG_RETENTION_HOURS: 168
      KAFKA_CFG_LOG_RETENTION_BYTES: 1073741824
      KAFKA_CFG_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_CFG_NUM_PARTITIONS: 3
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_CFG_MIN_INSYNC_REPLICAS: 1
      # 安全配置
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka_data:/bitnami/kafka
    ports:
      - "29092:9092"
    networks:
      - miniblog-v3-network
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics.sh",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      timeout: 30s
      retries: 10
      start_period: 180s
      interval: 30s
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
      - "com.docker.compose.service=kafka"

volumes:
  mysql_data:
    driver: local
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
  redis_data:
    driver: local
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
  etcd_data:
    driver: local
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
  zookeeper_data:
    driver: local
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
  zookeeper_logs:
    driver: local
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
  kafka_data:
    driver: local
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"

networks:
  miniblog-v3-network:
    driver: bridge
    external: true
    name: miniblog-v3-network
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
