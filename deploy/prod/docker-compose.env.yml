version: '3.8'

services:
  # MySQL 数据库服务
  mysql:
    image: mysql:8.0.27
    container_name: miniblog-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123456}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-miniblog}
      MYSQL_USER: ${MYSQL_USER:-miniblog}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-miniblog123}
      MYSQL_CHARACTER_SET_SERVER: ${MYSQL_CHARACTER_SET_SERVER:-utf8mb4}
      MYSQL_COLLATION_SERVER: ${MYSQL_COLLATION_SERVER:-utf8mb4_unicode_ci}
      MYSQL_INNODB_BUFFER_POOL_SIZE: ${MYSQL_INNODB_BUFFER_POOL_SIZE:-256M}
      MYSQL_MAX_CONNECTIONS: ${MYSQL_MAX_CONNECTIONS:-200}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./sql:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    networks:
      - miniblog-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
      - "com.docker.compose.service=mysql"

  # Redis 缓存服务
  redis:
    image: redis:latest
    container_name: miniblog-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123} --maxmemory ${REDIS_MAX_MEMORY:-256mb} --maxmemory-policy ${REDIS_MAX_MEMORY_POLICY:-allkeys-lru}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - miniblog-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 3s
      retries: 5
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
      - "com.docker.compose.service=redis"

  # etcd 服务
  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    container_name: miniblog-etcd
    restart: unless-stopped
    command: |
      etcd
      --name miniblog-etcd
      --data-dir /var/lib/etcd
      --listen-client-urls http://0.0.0.0:2379
      --advertise-client-urls http://miniblog-etcd:2379
      --listen-peer-urls http://0.0.0.0:2380
      --initial-advertise-peer-urls http://miniblog-etcd:2380
      --initial-cluster miniblog-etcd=http://miniblog-etcd:2380
      --initial-cluster-state new
      --initial-cluster-token miniblog-etcd-token
      --max-request-bytes ${ETCD_MAX_REQUEST_BYTES:-1048576}
      --quota-backend-bytes ${ETCD_QUOTA_BACKEND_BYTES:-2147483648}
    volumes:
      - etcd_data:/var/lib/etcd
    ports:
      - "${ETCD_CLIENT_PORT:-2379}:2379"
      - "${ETCD_PEER_PORT:-2380}:2380"
    networks:
      - miniblog-network
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      timeout: 10s
      retries: 5
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
      - "com.docker.compose.service=etcd"

  # Zookeeper 服务（Kafka 依赖）
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: miniblog-zookeeper
    restart: unless-stopped
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
      ZOO_TICK_TIME: ${ZOOKEEPER_TICK_TIME:-2000}
      ZOO_INIT_LIMIT: ${ZOOKEEPER_INIT_LIMIT:-5}
      ZOO_SYNC_LIMIT: ${ZOOKEEPER_SYNC_LIMIT:-2}
      ZOO_MAX_CLIENT_CNXNS: ${ZOOKEEPER_MAX_CLIENT_CNXNS:-60}
      ZOO_AUTOPURGE_SNAP_RETAIN_COUNT: ${ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT:-3}
      ZOO_AUTOPURGE_PURGE_INTERVAL: ${ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL:-24}
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    networks:
      - miniblog-network
    healthcheck:
      test: ["CMD", "zookeeper-shell", "localhost:2181", "ruok"]
      timeout: 10s
      retries: 5
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
      - "com.docker.compose.service=zookeeper"

  # Kafka 服务
  kafka:
    image: bitnami/kafka:latest
    container_name: miniblog-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: miniblog-zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://miniblog-kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:-1}
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR:-1}
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR:-1}
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS:-0}
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_AUTO_CREATE_TOPICS_ENABLE:-true}
      KAFKA_CFG_DELETE_TOPIC_ENABLE: ${KAFKA_DELETE_TOPIC_ENABLE:-true}
      KAFKA_CFG_LOG_RETENTION_HOURS: ${KAFKA_LOG_RETENTION_HOURS:-168}
      KAFKA_CFG_LOG_RETENTION_BYTES: ${KAFKA_LOG_RETENTION_BYTES:-1073741824}
      KAFKA_CFG_LOG_SEGMENT_BYTES: ${KAFKA_LOG_SEGMENT_BYTES:-1073741824}
      KAFKA_CFG_NUM_PARTITIONS: ${KAFKA_NUM_PARTITIONS:-3}
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: ${KAFKA_DEFAULT_REPLICATION_FACTOR:-1}
      KAFKA_CFG_MIN_INSYNC_REPLICAS: ${KAFKA_MIN_INSYNC_REPLICAS:-1}
      ALLOW_PLAINTEXT_LISTENER: yes
    volumes:
      - kafka_data:/bitnami/kafka
    ports:
      - "${KAFKA_PORT:-29092}:9092"
    networks:
      - miniblog-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      timeout: 30s
      retries: 5
      start_period: 60s
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
      - "com.docker.compose.service=kafka"

volumes:
  mysql_data:
    driver: local
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
  redis_data:
    driver: local
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
  etcd_data:
    driver: local
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
  zookeeper_data:
    driver: local
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
  zookeeper_logs:
    driver: local
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
  kafka_data:
    driver: local
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"

networks:
  miniblog-network:
    driver: bridge
    labels:
      - "com.docker.compose.project=miniblog-infrastructure"
