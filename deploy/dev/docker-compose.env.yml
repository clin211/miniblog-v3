# Copyright 2025 长林啊 &lt;767425412@qq.com>. All rights reserved.
# Use of this source code is governed by a MIT style
# license that can be found in the LICENSE file. The original repo for
# this file is https://github.com/clin211/miniblog-v3.git.

version: "3.8"

services:
  # MySQL 数据库服务
  mysql:
    image: mysql:8.0
    container_name: miniblog-mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      # 基本配置
      MYSQL_ROOT_PASSWORD: j478EaZGDNPUbnXb
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_general_ci
      # 时区设置
      TZ: Asia/Shanghai
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - miniblog-network
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --default-time-zone='+08:00'

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    container_name: miniblog-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      TZ: Asia/Shanghai
    volumes:
      - redis_data:/data
    networks:
      - miniblog-network
    command: >
      redis-server
      --requirepass weZ2014P89rlTuWe

  # Kafka 消息队列服务
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: miniblog-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper_data:/opt/zookeeper-3.4.9/data
    networks:
      - miniblog-network

  kafka:
    image: wurstmeister/kafka
    container_name: miniblog-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/opt/kafka/kafka-logs
    networks:
      - miniblog-network
    depends_on:
      - zookeeper

  # Kafka UI 管理界面（可选）
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: miniblog-kafka-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: miniblog-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - miniblog-network
    depends_on:
      - kafka

  # Elasticsearch 搜索引擎（日志存储）
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: miniblog-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - TZ=Asia/Shanghai
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - miniblog-network

  # Kibana 日志分析界面
  kibana:
    image: kibana:8.8.0
    container_name: miniblog-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - TZ=Asia/Shanghai
    networks:
      - miniblog-network
    depends_on:
      - elasticsearch

  # go-stash 日志处理器（消费 Kafka 中的日志数据并输出到 Elasticsearch）
  go-stash:
    image: kevinwan/go-stash:1.1.1 # Intel/AMD 架构
    # image: kevinwan/go-stash:1.0-arm64 # Apple M1/ARM 架构
    container_name: miniblog-go-stash
    environment:
      TZ: Asia/Shanghai
    restart: unless-stopped
    volumes:
      - ./go-stash:/app/etc
    networks:
      - miniblog-network
    depends_on:
      - elasticsearch
      - kafka

  # Filebeat 日志采集
  filebeat:
    image: elastic/filebeat:8.8.0
    container_name: miniblog-filebeat
    restart: unless-stopped
    user: root
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ../../logs:/var/log/app:ro
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - miniblog-network
    depends_on:
      - kafka

  # Prometheus 指标收集
  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: miniblog-prometheus
    restart: unless-stopped
    ports:
      - "19090:9090"
    environment:
      TZ: Asia/Shanghai
    volumes:
      - prometheus_data:/prometheus
    networks:
      - miniblog-network
    command: >
      --config.file=/etc/prometheus/prometheus.yml
      --storage.tsdb.path=/prometheus
      --web.console.libraries=/etc/prometheus/console_libraries
      --web.console.templates=/etc/prometheus/consoles
      --storage.tsdb.retention.time=15d
      --web.enable-lifecycle

  # Grafana 监控可视化
  grafana:
    image: grafana/grafana:9.5.0
    container_name: miniblog-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - TZ=Asia/Shanghai
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - miniblog-network
    depends_on:
      - prometheus

  # Jaeger 链路追踪
  jaeger:
    image: jaegertracing/all-in-one:1.46
    container_name: miniblog-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # HTTP collector
      - "14250:14250" # gRPC collector
      - "6831:6831/udp" # UDP agent
      - "6832:6832/udp" # UDP agent
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - TZ=Asia/Shanghai
    volumes:
      - jaeger_data:/badger
    networks:
      - miniblog-network

  # etcd 分布式键值存储服务
  etcd:
    image: bitnami/etcd:latest
    container_name: miniblog-etcd
    restart: unless-stopped
    ports:
      - "2379:2379" # 客户端端口
      - "2380:2380" # 集群通信端口
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_NAME=etcd0
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd:2380
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_INITIAL_CLUSTER=etcd0=http://etcd:2380
      - ETCD_INITIAL_CLUSTER_STATE=new
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster
      - TZ=Asia/Shanghai
    volumes:
      - etcd_data:/bitnami/etcd
    networks:
      - miniblog-network

networks:
  miniblog-network:
    external: true
    name: miniblog-network

volumes:
  mysql_data:
  redis_data:
  zookeeper_data:
  kafka_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  jaeger_data:
  etcd_data:
